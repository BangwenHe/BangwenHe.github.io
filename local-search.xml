<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MNN GPU float16 使用原理</title>
    <link href="/2024/03/11/MNN_GPU_float16/"/>
    <url>/2024/03/11/MNN_GPU_float16/</url>
    
    <content type="html"><![CDATA[<p>我观察到 MNN 在使用 GPU OpenCL 时，会默认使用 float16 的格式，导致模型评测时时间不同，如图。因此查看了 MNN 的源码，发现了一些有趣的东西。</p><p>MNN 使用 <code>MNN::BackendConfig::Precision_Low</code> 时，会根据 GPU 的实际情况判断是否使用 float16 的数据格式。代码随附。</p><p>当导出的模型可以使用 float32 或者 float16 保存，当权重转换到 GPU 上时，会转换格式，在代码的第19行到第22行。代码随附。</p><p>Pipeline 中保存的 tensor 指向的 opencl buffer 保存的还是 float16。但是 <code>OpenCL::onMapTensor</code> 和 <code>OpenCL::onUnmapTensor</code> 的实现保证了映射前后得到的是 float32。<code>OpenCLBackend::onAcquire</code> 给出了 tensor 中保存的 buffer 格式，其中调用了 <code>isSupportedFP16</code> 判断目前是否支持 float16，如果支持则使用 float16 的大小创建 buffer。</p><p><code>OpenCLBackend::onMapTensor</code> 给出了映射 gpu buffer 到 cpu 上的实现。调用 <code>onMapTensor</code> 时如果不支持 SVM，会创建一个新的 cpu 内存块（<code>svmPtr = allocMapTensorMemory</code>），可以执行任意操作。对这块内存操作完毕后，如果是以 <code>MAP_TENSOR_WRITE</code> 的形式创建的 tensor，会将内存重新写回到 gpu buffer 中（<code>onCopyBuffer(&amp;srcTensor, dstTensor)</code>），这个时候会执行一次数据格式转换，包括 float16 到 float32。这表示：<strong>每次只能 map 一个 gpu tensor，不能 map 两个</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// MNN OpenCLBackend.cpp</span><br><span class="hljs-function">Backend::MemObj* <span class="hljs-title">OpenCLBackend::onAcquire</span><span class="hljs-params">(<span class="hljs-type">const</span> Tensor* nativeTensor, StorageType storageType)</span> </span>&#123;<br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOG_VERBOSE</span><br>    <span class="hljs-built_in">MNN_PRINT</span>(<span class="hljs-string">&quot;Start OpenCLBackend::onAcquireBuffer !\n&quot;</span>);<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-keyword">auto</span> tensorShape = OpenCL::<span class="hljs-built_in">tensorShapeFormat</span>(nativeTensor);<br>    <span class="hljs-type">int</span> N = tensorShape.<span class="hljs-built_in">at</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">int</span> H = tensorShape.<span class="hljs-built_in">at</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> W = tensorShape.<span class="hljs-built_in">at</span>(<span class="hljs-number">2</span>);<br>    <span class="hljs-type">int</span> C = tensorShape.<span class="hljs-built_in">at</span>(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOG_VERBOSE</span><br>    <span class="hljs-built_in">MNN_PRINT</span>(<span class="hljs-string">&quot;OpenCLBackend::onAcquireBuffer: NHWC:[%d, %d, %d, %d]\n&quot;</span>, N, H, W, C);<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MNN_OPENCL_BUFFER_CLOSED</span><br>    <span class="hljs-keyword">if</span>(mOpenCLRuntime-&gt;<span class="hljs-built_in">getGpuMemType</span>() == BUFFER) &#123;<br>        <span class="hljs-type">size_t</span> size;<br>        <span class="hljs-keyword">if</span> (nativeTensor-&gt;<span class="hljs-built_in">dimensions</span>() &gt;= <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">auto</span> alignC = <span class="hljs-built_in">ROUND_UP</span>(C, <span class="hljs-number">8</span>);<br>            <span class="hljs-comment">// increment of height and width</span><br>            <span class="hljs-keyword">auto</span> hR = <span class="hljs-built_in">ROUND_UP</span>(H + <span class="hljs-number">3</span>, <span class="hljs-number">4</span>) - H;<br>            <span class="hljs-keyword">auto</span> wR = <span class="hljs-built_in">ROUND_UP</span>(W + <span class="hljs-number">3</span>, <span class="hljs-number">4</span>) - W;<br>            size = N * alignC * W * H;<br>            size = size + hR * W * <span class="hljs-number">4</span> + wR * <span class="hljs-number">4</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            size = nativeTensor-&gt;<span class="hljs-built_in">elementSize</span>();<br>            size = <span class="hljs-built_in">ROUND_UP</span>(size, <span class="hljs-number">4</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (mOpenCLRuntime-&gt;<span class="hljs-built_in">isSupportedIntelSubgroup</span>()) &#123;<br>            <span class="hljs-type">int</span> cPack = TensorUtils::<span class="hljs-built_in">getTensorChannelPack</span>(nativeTensor);<br>            <span class="hljs-keyword">auto</span> pads  = TensorUtils::<span class="hljs-built_in">getDescribe</span>(nativeTensor)-&gt;mPads;<br>            <span class="hljs-type">size_t</span> imageWidth  = (<span class="hljs-type">size_t</span>) <span class="hljs-built_in">ROUND_UP</span>(<span class="hljs-built_in">UP_DIV</span>(C, cPack), <span class="hljs-number">2</span>) * <span class="hljs-built_in">ROUND_UP</span>(pads.left + W + pads.right, <span class="hljs-number">4</span>);<span class="hljs-comment">//C-round to 8,W-round to 4, for memory alloc</span><br>            <span class="hljs-type">size_t</span> imageHeight = (<span class="hljs-type">size_t</span>)N * H;<br>            size = imageWidth*imageHeight*cPack;<br>        &#125;<br>        cl_channel_type dataType = CL_FLOAT;<br>        <span class="hljs-comment">//when support and want fp16, use half datatype</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">getOpenCLRuntime</span>()-&gt;<span class="hljs-built_in">isSupportedFP16</span>()) &#123;<br>            dataType = CL_HALF_FLOAT;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (storageType == DYNAMIC_SEPERATE) &#123;<br>            <span class="hljs-keyword">auto</span> buffer = mBufferPool-&gt;<span class="hljs-built_in">alloc</span>(size*<br>                          (dataType==CL_HALF_FLOAT?<span class="hljs-built_in">sizeof</span>(half_float::half):<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>)), <span class="hljs-literal">true</span>);<br>            ((Tensor*)nativeTensor)-&gt;<span class="hljs-built_in">buffer</span>().device = (<span class="hljs-type">uint64_t</span>)buffer;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">CLMemReleaseBuffer</span>(buffer, mBufferPool.<span class="hljs-built_in">get</span>());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (storageType == DYNAMIC) &#123;<br>            <span class="hljs-keyword">auto</span> buffer = mBufferPool-&gt;<span class="hljs-built_in">alloc</span>(size*<br>                          (dataType==CL_HALF_FLOAT?<span class="hljs-built_in">sizeof</span>(half_float::half):<span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>)));<br>            ((Tensor*)nativeTensor)-&gt;<span class="hljs-built_in">buffer</span>().device = (<span class="hljs-type">uint64_t</span>)buffer;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">CLMemReleaseBuffer</span>(buffer, mBufferPool.<span class="hljs-built_in">get</span>());<br>        &#125;<br>        <span class="hljs-built_in">MNN_ASSERT</span>(storageType == STATIC);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> MNN_LOW_MEMORY</span><br>        <span class="hljs-comment">// for weight quant model&#x27;s weight</span><br>        <span class="hljs-keyword">if</span> ((nativeTensor-&gt;<span class="hljs-built_in">getType</span>().code == halide_type_int) &amp;&amp;<br>            (nativeTensor-&gt;<span class="hljs-built_in">getType</span>().bits == <span class="hljs-number">8</span> || nativeTensor-&gt;<span class="hljs-built_in">getType</span>().bits == <span class="hljs-number">4</span>)) &#123;<br>            <span class="hljs-comment">// int8 quant</span><br>            <span class="hljs-type">size_t</span> alloc_size = size;<br>            <span class="hljs-keyword">if</span> (nativeTensor-&gt;<span class="hljs-built_in">getType</span>().bits == <span class="hljs-number">4</span>) &#123;<br>                <span class="hljs-comment">// int4 quant</span><br>                alloc_size = size / <span class="hljs-number">2</span>;<br>            &#125;<br>            <span class="hljs-keyword">auto</span> buffer = mStaticBufferPool-&gt;<span class="hljs-built_in">alloc</span>(alloc_size);<br>            ((Tensor*)nativeTensor)-&gt;<span class="hljs-built_in">buffer</span>().device = (<span class="hljs-type">uint64_t</span>)buffer;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">CLMemReleaseBuffer</span>(buffer, mStaticBufferPool.<span class="hljs-built_in">get</span>());<br>        &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>        <span class="hljs-keyword">auto</span> buffer = mStaticBufferPool-&gt;<span class="hljs-built_in">alloc</span>(size*<br>                     (dataType == CL_HALF_FLOAT ? <span class="hljs-built_in">sizeof</span>(half_float::half) : <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>)));<br>        ((Tensor*)nativeTensor)-&gt;<span class="hljs-built_in">buffer</span>().device = (<span class="hljs-type">uint64_t</span>)buffer; <span class="hljs-comment">// fix</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">CLMemReleaseBuffer</span>(buffer, mStaticBufferPool.<span class="hljs-built_in">get</span>());<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/* MNN_OPENCL_BUFFER_CLOSED */</span></span><br>    &#123;<br>        <span class="hljs-type">size_t</span> imageWidth  = (<span class="hljs-type">size_t</span>) (<span class="hljs-built_in">UP_DIV</span>(C, <span class="hljs-number">4</span>) * W);<span class="hljs-comment">//image mode only C pack to 4</span><br>        <span class="hljs-type">size_t</span> imageHeight = (<span class="hljs-type">size_t</span>)N * H;<br>        cl_channel_type dataType = CL_HALF_FLOAT;<br>        <span class="hljs-comment">//when user want high precision, use float datatype</span><br>        <span class="hljs-keyword">if</span> (mPrecision == BackendConfig::Precision_High) &#123;<br>            dataType = CL_FLOAT;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (storageType == DYNAMIC_SEPERATE) &#123;<br>            <span class="hljs-keyword">auto</span> image                               = mImagePool-&gt;<span class="hljs-built_in">alloc</span>(imageWidth, imageHeight, dataType, <span class="hljs-literal">true</span>);<br>            ((Tensor*)nativeTensor)-&gt;<span class="hljs-built_in">buffer</span>().device = (<span class="hljs-type">uint64_t</span>)image; <span class="hljs-comment">// fix</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">CLMemReleaseImage</span>(image, mImagePool.<span class="hljs-built_in">get</span>());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (storageType == DYNAMIC) &#123;<br>            <span class="hljs-keyword">auto</span> image                               = mImagePool-&gt;<span class="hljs-built_in">alloc</span>(imageWidth, imageHeight, dataType);<br>            ((Tensor*)nativeTensor)-&gt;<span class="hljs-built_in">buffer</span>().device = (<span class="hljs-type">uint64_t</span>)image; <span class="hljs-comment">// fix</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">CLMemReleaseImage</span>(image, mImagePool.<span class="hljs-built_in">get</span>());<br>        &#125;<br>        <span class="hljs-built_in">MNN_ASSERT</span>(storageType == STATIC);<br>        <span class="hljs-keyword">auto</span> image                               = mStaticImagePool-&gt;<span class="hljs-built_in">alloc</span>(imageWidth, imageHeight, dataType);<br>        ((Tensor*)nativeTensor)-&gt;<span class="hljs-built_in">buffer</span>().device = (<span class="hljs-type">uint64_t</span>)image; <span class="hljs-comment">// fix</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">CLMemReleaseImage</span>(image, mStaticImagePool.<span class="hljs-built_in">get</span>());<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">OpenCLBackend::onMapTensor</span><span class="hljs-params">(Tensor::MapType mtype, Tensor::DimensionType dtype, <span class="hljs-type">const</span> Tensor* srcTensor)</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> needSize = srcTensor-&gt;<span class="hljs-built_in">size</span>();<br>    <span class="hljs-built_in">clearRecord</span>();<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> MNN_OPENCL_SVM_ENABLE</span><br>    <span class="hljs-keyword">auto</span> svm_cap_ = mOpenCLRuntime-&gt;<span class="hljs-built_in">getSvmCapabilities</span>();<br>    <span class="hljs-type">bool</span> use_svm = (svm_cap_ &amp; CL_DEVICE_SVM_FINE_GRAIN_BUFFER);<span class="hljs-comment">//support fine grain svm</span><br>    use_svm |= ((svm_cap_ &amp; CL_DEVICE_SVM_COARSE_GRAIN_BUFFER) &amp;&amp; mOpenCLRuntime-&gt;<span class="hljs-built_in">getGpuType</span>() == ADRENO);<span class="hljs-comment">//support coarse grain svm and adreno gpu</span><br><br>    mUseSvm = (mOpenCLRuntime-&gt;<span class="hljs-built_in">getCLVersion</span>() &gt; <span class="hljs-number">1.99f</span> &amp;&amp; use_svm);<br>    <span class="hljs-keyword">if</span>(mUseSvm) &#123;<span class="hljs-comment">// CL version beyond 2.0 &amp; support svm</span><br>        svmPtr = <span class="hljs-built_in">allocMapTensorMemory</span>(needSize, <span class="hljs-literal">true</span>, svm_cap_);<br><br>        <span class="hljs-keyword">if</span>(mtype == Tensor::MAP_TENSOR_READ) &#123;<br>            <span class="hljs-comment">//tmpTensor alloc</span><br>            <span class="hljs-function">MNN::Tensor <span class="hljs-title">tmpTensor</span><span class="hljs-params">(srcTensor, dtype, <span class="hljs-literal">false</span>)</span></span>;<br>            tmpTensor.<span class="hljs-built_in">buffer</span>().device = (<span class="hljs-type">uint64_t</span>)svmPtr;<br><br>            <span class="hljs-comment">//Convert format</span><br>            MNN_DATA_FORMAT format_type = MNN_DATA_FORMAT_NCHW;<br>            <span class="hljs-keyword">if</span>(dtype == MNN::Tensor::TENSORFLOW) &#123;<br>                format_type = MNN_DATA_FORMAT_NHWC;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dtype == MNN::Tensor::CAFFE_C4) &#123;<br>                format_type = MNN_DATA_FORMAT_NC4HW4;<br>            &#125;<br>            mCLRuntime-&gt;<span class="hljs-built_in">convertFromDevice</span>(srcTensor, &amp;tmpTensor, format_type, <span class="hljs-literal">true</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(svm_cap_ &amp; CL_DEVICE_SVM_FINE_GRAIN_BUFFER) &#123;<br>            <span class="hljs-comment">//Make sure command finished</span><br>            mOpenCLRuntime-&gt;<span class="hljs-built_in">commandQueue</span>().<span class="hljs-built_in">finish</span>();<br>            <span class="hljs-keyword">return</span> svmPtr;<br>        &#125;<br><br>        <span class="hljs-keyword">auto</span> map_flag = CL_MAP_WRITE;<br>        <span class="hljs-keyword">if</span>(mtype == Tensor::MAP_TENSOR_READ) &#123;<br>            map_flag = CL_MAP_READ;<br>        &#125;<br><br>        cl_int res = <span class="hljs-built_in">clEnqueueSVMMap</span>(mOpenCLRuntime-&gt;<span class="hljs-built_in">commandQueue</span>().<span class="hljs-built_in">get</span>(), <span class="hljs-literal">true</span>, map_flag, svmPtr, needSize, <span class="hljs-number">0</span>, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>);<br><br>        <span class="hljs-built_in">MNN_CHECK_CL_SUCCESS</span>(res, <span class="hljs-string">&quot;svm_map&quot;</span>)<br>        <span class="hljs-keyword">return</span> svmPtr;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    Not Support Svm, Use onopyBuffer</span><br><span class="hljs-comment">     */</span><br>    svmPtr = <span class="hljs-built_in">allocMapTensorMemory</span>(needSize, <span class="hljs-literal">false</span>);<br><br>    <span class="hljs-keyword">if</span>(mtype == Tensor::MAP_TENSOR_READ) &#123;<br>        <span class="hljs-comment">//tmpTensor alloc</span><br>        <span class="hljs-function">MNN::Tensor <span class="hljs-title">tmpTensor</span><span class="hljs-params">(srcTensor, dtype, <span class="hljs-literal">false</span>)</span></span>;<br>        tmpTensor.<span class="hljs-built_in">buffer</span>().host = (<span class="hljs-type">uint8_t</span> *)svmPtr;<br><br>        <span class="hljs-comment">//use onCopyBuffer</span><br>        <span class="hljs-built_in">onCopyBuffer</span>(srcTensor, &amp;tmpTensor);<br>    &#125;<br>    <span class="hljs-keyword">return</span> svmPtr;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">OpenCLBackend::onUnmapTensor</span><span class="hljs-params">(Tensor::MapType mtype, Tensor::DimensionType dtype, <span class="hljs-type">const</span> Tensor* dstTensor, <span class="hljs-type">void</span>* mapPtr)</span> </span>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> MNN_OPENCL_SVM_ENABLE</span><br>    <span class="hljs-keyword">auto</span> svm_cap_ = mOpenCLRuntime-&gt;<span class="hljs-built_in">getSvmCapabilities</span>();<br>    <span class="hljs-keyword">if</span>(mUseSvm) &#123;<span class="hljs-comment">// CL version beyond 2.0 &amp; support svm</span><br><br>        <span class="hljs-comment">//If COARSE_SVM, Unmap first</span><br>        <span class="hljs-keyword">if</span>(!(svm_cap_ &amp; CL_DEVICE_SVM_FINE_GRAIN_BUFFER)) &#123;<br>            cl_int res = <span class="hljs-built_in">clEnqueueSVMUnmap</span>(mOpenCLRuntime-&gt;<span class="hljs-built_in">commandQueue</span>().<span class="hljs-built_in">get</span>(), svmPtr, <span class="hljs-number">0</span>, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>);<br>            <span class="hljs-built_in">MNN_CHECK_CL_SUCCESS</span>(res, <span class="hljs-string">&quot;svm_unmap&quot;</span>)<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(mtype == Tensor::MAP_TENSOR_WRITE) &#123;<br>            <span class="hljs-comment">//interTensor alloc</span><br>            <span class="hljs-function">MNN::Tensor <span class="hljs-title">interTensor</span><span class="hljs-params">(dstTensor, dtype, <span class="hljs-literal">false</span>)</span></span>;<br>            interTensor.<span class="hljs-built_in">buffer</span>().device = (<span class="hljs-type">uint64_t</span>)svmPtr;<br><br>            <span class="hljs-comment">//Convert format</span><br>            MNN_DATA_FORMAT format_type = MNN_DATA_FORMAT_NCHW;<br>            <span class="hljs-keyword">if</span>(dtype == MNN::Tensor::TENSORFLOW) &#123;<br>                format_type = MNN_DATA_FORMAT_NHWC;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dtype == MNN::Tensor::CAFFE_C4) &#123;<br>                format_type = MNN_DATA_FORMAT_NC4HW4;<br>            &#125;<br>            mCLRuntime-&gt;<span class="hljs-built_in">convertToDevice</span>(&amp;interTensor, dstTensor, format_type, <span class="hljs-literal">true</span>);<br>        &#125;<br>        mOpenCLRuntime-&gt;<span class="hljs-built_in">commandQueue</span>().<span class="hljs-built_in">finish</span>();<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    Not Support Svm, Use onopyBuffer</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span>(mtype == Tensor::MAP_TENSOR_WRITE) &#123;<br>        <span class="hljs-comment">//srcTensor alloc</span><br>        <span class="hljs-function">MNN::Tensor <span class="hljs-title">srcTensor</span><span class="hljs-params">(dstTensor, dtype, <span class="hljs-literal">false</span>)</span></span>;<br>        srcTensor.<span class="hljs-built_in">buffer</span>().host = (<span class="hljs-type">uint8_t</span> *)svmPtr;<br><br>        <span class="hljs-comment">//use onCopyBuffer</span><br>        <span class="hljs-built_in">onCopyBuffer</span>(&amp;srcTensor, dstTensor);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><br><span class="hljs-comment">// MNN ConvBufExecution.cpp</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ConvBufExecution::setConv1x1WeightBuffer</span><span class="hljs-params">(<span class="hljs-type">int</span> packCout, <span class="hljs-type">int</span> packCin, <span class="hljs-type">const</span> <span class="hljs-type">float</span>* filterDataPtr)</span> </span>&#123;<br>    cl_int res;<br>    <span class="hljs-function">std::shared_ptr&lt;Tensor&gt; <span class="hljs-title">filterBuffer</span><span class="hljs-params">(Tensor::createDevice&lt;<span class="hljs-type">float</span>&gt;(&#123;ROUND_UP(mOutputChannel, <span class="hljs-number">8</span>)<span class="hljs-comment">/*Cout pack set to max 8*/</span>, ROUND_UP(mInputChannel, packCin), mKernelWidth, mKernelHeight&#125;))</span></span>;<br>    <br>    <span class="hljs-type">int</span> buffer_size = filterBuffer-&gt;<span class="hljs-built_in">elementSize</span>();<br>    <span class="hljs-keyword">if</span>(mOpenCLBackend-&gt;<span class="hljs-built_in">getOpenCLRuntime</span>()-&gt;<span class="hljs-built_in">isSupportedFP16</span>()) &#123;<br>        buffer_size *= <span class="hljs-built_in">sizeof</span>(half_float::half);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        buffer_size *= <span class="hljs-built_in">sizeof</span>(<span class="hljs-type">float</span>);<br>    &#125;<br>    mKernelBuffer.<span class="hljs-built_in">reset</span>(<span class="hljs-keyword">new</span> cl::<span class="hljs-built_in">Buffer</span>(mOpenCLBackend-&gt;<span class="hljs-built_in">getOpenCLRuntime</span>()-&gt;<span class="hljs-built_in">context</span>(), CL_MEM_READ_WRITE | CL_MEM_ALLOC_HOST_PTR, buffer_size));<br>    <span class="hljs-keyword">auto</span> kernelBufferPtr = mOpenCLBackend-&gt;<span class="hljs-built_in">getOpenCLRuntime</span>()-&gt;<span class="hljs-built_in">commandQueue</span>().<span class="hljs-built_in">enqueueMapBuffer</span>(*(mKernelBuffer.<span class="hljs-built_in">get</span>()), <span class="hljs-literal">true</span>, CL_MAP_WRITE, <span class="hljs-number">0</span>, buffer_size, <span class="hljs-literal">nullptr</span>, <span class="hljs-literal">nullptr</span>, &amp;res);<br>    <span class="hljs-keyword">if</span>(kernelBufferPtr != <span class="hljs-literal">nullptr</span> &amp;&amp; res == CL_SUCCESS)&#123;<br>        ::<span class="hljs-built_in">memset</span>(kernelBufferPtr, <span class="hljs-number">0</span>, buffer_size);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> o = <span class="hljs-number">0</span>; o &lt; mOutputChannel; o++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span> ; i &lt; mInputChannel; i++)&#123;<br>                <span class="hljs-type">int</span> bufferIdx = (o/packCout) * <span class="hljs-built_in">ROUND_UP</span>(mInputChannel, packCin)*packCout + (i/packCin)*packCin*packCout + (o%packCout)*packCin + (i%packCin);<span class="hljs-comment">//(Co/packCout, Ci/packCin, packCout, packCin)</span><br>                <span class="hljs-type">int</span> filterIdx = o*mInputChannel + i;<br>                <span class="hljs-keyword">if</span>(mOpenCLBackend-&gt;<span class="hljs-built_in">getOpenCLRuntime</span>()-&gt;<span class="hljs-built_in">isSupportedFP16</span>())&#123;<br>                    ((half_float::half*)kernelBufferPtr)[bufferIdx] = (half_float::half)(filterDataPtr[filterIdx]);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    ((<span class="hljs-type">float</span>*)kernelBufferPtr)[bufferIdx] = (<span class="hljs-type">float</span>)(filterDataPtr[filterIdx]);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">MNN_ERROR</span>(<span class="hljs-string">&quot;Map error ptrCL == nullptr \n&quot;</span>);<br>        <span class="hljs-built_in">MNN_ASSERT</span>(<span class="hljs-literal">false</span>);<br>    &#125;<br>    mOpenCLBackend-&gt;<span class="hljs-built_in">getOpenCLRuntime</span>()-&gt;<span class="hljs-built_in">commandQueue</span>().<span class="hljs-built_in">enqueueUnmapMemObject</span>(*(mKernelBuffer.<span class="hljs-built_in">get</span>()), kernelBufferPtr);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// MNN OpenCLRuntime.cpp</span><br>cl_device_fp_config fpConfig;<br><span class="hljs-keyword">auto</span> success = mFirstGPUDevicePtr-&gt;<span class="hljs-built_in">getInfo</span>(CL_DEVICE_HALF_FP_CONFIG, &amp;fpConfig);<br>mIsDeviceSupportedFP16     = CL_SUCCESS == success &amp;&amp; fpConfig &gt; <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//set gpu mode, tuning level and memory object</span><br><span class="hljs-built_in">setGpuMode</span>(cl_mode);<br><br><span class="hljs-keyword">if</span>(mMemType == AUTO) &#123;<br>    <span class="hljs-keyword">if</span>(mGpuType == MALI || mGpuType == INTEL) &#123;<br>        mMemType = BUFFER;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        mMemType = IMAGE;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">auto</span> permitFloat16 = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (precision == BackendConfig::Precision_Low || (mMemType == BUFFER &amp;&amp; precision == BackendConfig::Precision_Normal)) &#123;<span class="hljs-comment">//buffer mode not support Normal Precision yet</span><br>    permitFloat16 = <span class="hljs-literal">true</span>;<br>&#125;<br>mIsSupportedFP16 = mIsDeviceSupportedFP16 &amp;&amp; permitFloat16;<br><span class="hljs-built_in">MNN_PRINT</span>(<span class="hljs-string">&quot;opencl support fp16: %d, device support fp16: %d, permit fp16: %d\n&quot;</span>, mIsSupportedFP16, mIsDeviceSupportedFP16, permitFloat16);<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/03/11/hello-world/"/>
    <url>/2024/03/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
